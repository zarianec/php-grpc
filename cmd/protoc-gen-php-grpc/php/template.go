// MIT License
//
// Copyright (c) 2018 SpiralScout
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package php

import (
	"bytes"
	"fmt"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"strings"
	"text/template"
)

const phpBody = `<?php
# Generated by the protocol buffer compiler (spiral/php-grpc). DO NOT EDIT!
# source: {{ .File.Name }}
{{if .File.Package}} 
namespace {{ .File | namespace}};
{{end}}
use Spiral\GRPC;

interface {{ .Service.Name | interface }} extends GRPC\ServiceInterface
{
    // GRPC specific service name.
    public const NAME = "{{ name .File.Package .Service.Name }}"; {{ "\n" }}
{{- range $m := .Service.Method }}
    /**
    * @param GRPC\ContextInterface $ctx
    * @param {{ $m.InputType | message }} $in
    * @return {{ $m.OutputType | message}}
    *
    * @throws GRPC\Exception\InvokeException
    */
    public function {{ $m.Name }}(GRPC\ContextInterface $ctx, {{ $m.InputType | message }} $in): {{ $m.OutputType | message}};
{{ end -}}
}
`

var tpl *template.Template

func init() {
	tpl = template.Must(template.New("phpBody").Funcs(template.FuncMap{
		"namespace": func(file *descriptor.FileDescriptorProto) string {
			if file.Options.GetPhpNamespace() != "" {
				return namespace(file.Options.PhpNamespace, "\\")
			}
			return namespace(file.Package, "\\")
		},
		"message": func(name *string) string {
			chunks := strings.Split(*name, ".")
			return identifier(chunks[len(chunks)-1], "")
		},
		"interface": func(name *string) string {
			return identifier(*name, "interface")
		},
		"name": func(pkg *string, name *string) string {
			return fmt.Sprintf("%s.%s", *pkg, *name)
		},
	}).Parse(phpBody))
}

// generate php filename
func filename(file *descriptor.FileDescriptorProto, name *string) string {
	filePath := file.Package

	if file.Options.GetPhpNamespace() != "" {
		filePath = file.Options.PhpNamespace
		filePath = str(strings.Replace(*filePath, "\\", ".", -1))
	}

	return fmt.Sprintf("%s/%s.php", namespace(filePath, "/"), identifier(*name, "interface"))
}

// generate php file body
func body(file *descriptor.FileDescriptorProto, service *descriptor.ServiceDescriptorProto) string {
	out := bytes.NewBuffer(nil)

	err := tpl.Execute(out, struct {
		File    *descriptor.FileDescriptorProto
		Service *descriptor.ServiceDescriptorProto
	}{File: file, Service: service})

	if err != nil {
		panic(err)
	}

	return out.String()
}
